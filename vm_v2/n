game_engine.c:	process_list = player->process_list;
game_engine.c:	process_list = player->process_list;
game_engine.c:			if (player->alive)
instruction.c:		if (player->n == id)
instruction.c:			player->last_alive = data->cycle;
parse_players.c:	player->alive = 1;
parse_players.c:	player->last_alive = 0;
parse_players.c:	player->n = n;
parse_players.c:	process = create_process(NULL, player->n, -1);
parse_players.c:	ft_lstadd(&player->process_list, ft_lstnew(process, sizeof(t_process)));
place_players.c:	while (i < player->prog_size)
place_players.c:		arena[start + i] = player->inst[i];
place_players.c:		place_player(data->arena, i, (t_header *)player->content);
place_players.c:		((t_process *)(((t_header *)player->content)->process_list->content))->
place_players.c:		player = player->next;
print_arena.c:		player = current_player->content;
print_arena.c:			player->n, player->prog_size, player->prog_name);
print_arena.c:		ft_printf(" (\"%s\")!\n", player->comment);
print_arena.c:		current_player = current_player->next;
print_arena.c:		ft_printf("Player %d : %s\n", player->n, player->prog_name);
print_arena.c:		ft_printf("Last alive : %d", player->last_alive, player->alive);
